{"version":3,"sources":["services/services.js","context/CryptoContext.jsx","components/login.jsx","components/home.jsx","components/update.jsx","App.js","serviceWorker.js","index.js"],"names":["getLocalStorage","localStorage","getItem","CryptoContext","createContext","CryptoProvider","children","useState","data","setData","userEmail","setUserEmail","userPassword","setUserPassword","updateBitcon","setUpdateBitcoin","selectedCoin","setSelectedCoin","currentCurrencyValue","setCurrenctCurrencyValue","changeValueCurrency","setChangeValueCurrency","getData","a","axios","get","headers","authorization","then","bpi","catch","error","context","getCurrency","currency","Provider","value","SendingRequestAndGettingTokenToUser","post","email","password","response","token","status","setItem","err","console","log","Login","useContext","className","htmlFor","type","name","onChange","event","target","placeholder","required","FormLoginUser","FormLoginPassword","onClick","Home","useEffect","coins","Object","entries","map","coin","key","rate_float","ShowValues","CurrencyUpdateForm","e","Authorization","message","changeCurrencyValue","Update","App","Boolean","window","location","hostname","match","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1492f702.chunk.js","sourcesContent":["export const saveLocalStorage = (token) => localStorage.setItem('token', token);\n\nexport const getLocalStorage = () => localStorage.getItem('token');\n","import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport { getLocalStorage } from '../services/services';\n\nconst CryptoContext = createContext();\n\nconst CryptoProvider = ({ children }) => {\n  const [data, setData] = useState([]);\n  const [userEmail, setUserEmail] = useState();\n  const [userPassword, setUserPassword] = useState();\n  const [updateBitcon, setUpdateBitcoin] = useState(1);\n  const [selectedCoin, setSelectedCoin] = useState('BRL');\n  const [currentCurrencyValue, setCurrenctCurrencyValue] = useState({});\n  const [changeValueCurrency, setChangeValueCurrency] = useState();\n\n  const getData = async () => {\n    return axios.get('http://localhost:3001/crypto/btc',\n      { headers: { authorization: getLocalStorage(), 'Content-Type': 'application/json' } })\n      .then(({ data }) => setData(data.bpi))\n      .catch(error => setData(error));\n  };\n\n  const getCurrency = async () => {\n    return axios.get('http://localhost:3001/currencies',\n      { headers: { 'Content-Type': 'application/json' } })\n      .then((currency) => setCurrenctCurrencyValue(currency.data))\n      .catch(error => setCurrenctCurrencyValue(error));\n  };\n\n  const context = {\n    changeValueCurrency,\n    currentCurrencyValue,\n    data,\n    selectedCoin,\n    getCurrency,\n    userEmail,\n    userPassword,\n    updateBitcon,\n    setChangeValueCurrency,\n    setSelectedCoin,\n    setUserEmail,\n    setUserPassword,\n    setUpdateBitcoin,\n    getData\n  };\n\n  return (\n    <CryptoContext.Provider value={context}>\n      {children}\n    </CryptoContext.Provider>\n  );\n};\n\nCryptoProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport { CryptoContext, CryptoProvider as Provider };\n","import React, { useContext } from 'react';\nimport { CryptoContext } from '../context/CryptoContext';\nimport axios from 'axios';\nimport { saveLocalStorage } from '../services/services';\nimport './login.css';\n\nfunction FormLoginUser() {\n  const { userEmail, setUserEmail } = useContext(CryptoContext);\n  return (\n    <section>\n      <label className=\"email\" htmlFor=\"email\">\n        email:\n        <input\n          className=\"input-email\"\n          type=\"email\"\n          name=\"email\"\n          value={userEmail}\n          onChange={(event) => setUserEmail(event.target.value)}\n          placeholder=\"exemplo@exemplo.com\"\n          required\n        />\n      </label>\n    </section>\n  );\n}\n\nfunction FormLoginPassword() {\n  const { userPassword, setUserPassword } = useContext(CryptoContext);\n  return (\n    <section>\n      <label className=\"password\" htmlFor=\"password\">\n        password:\n        <input\n          className=\"input-password\"\n          type=\"password\"\n          name=\"password\"\n          value={userPassword}\n          onChange={(event) => setUserPassword(event.target.value)}\n          placeholder=\"Digite sua senha\"\n          required\n        />\n      </label>\n    </section>\n  );\n}\n\nfunction SendingRequestAndGettingTokenToUser(userEmail, userPassword) {\n  axios.post('http://localhost:3001/login', {\n    email: userEmail,\n    password: userPassword\n  }).then((response) => {\n    if (response.status = 200) saveLocalStorage(response.data.token);\n  }).catch(err => console.log(err));\n}\n\nexport default function Login() {\n  const { userEmail, userPassword } = useContext(CryptoContext);\n\n  return (\n    <div>\n      {FormLoginUser()}\n      {FormLoginPassword()}\n      <button\n        className=\"form-submit\"\n        type=\"submit\"\n        onClick={() => SendingRequestAndGettingTokenToUser(userEmail, userPassword)}\n      >\n        Entrar\n      </button>\n    </div>\n  );\n}\n","import React, { useContext, useEffect } from 'react';\nimport { CryptoContext } from '../context/CryptoContext';\n\nfunction ShowValues() {\n  const { data, updateBitcon, setUpdateBitcoin } = useContext(CryptoContext);\n  const coins = Object.entries(data);\n\n  return (\n    <div>\n      <button type=\"button\" onClick={setUpdateBitcoin(updateBitcon)}>\n        Atualizar valor monet√°rio\n      </button>\n      <div>\n        BTC:\n        <input\n          type=\"number\"\n          value={updateBitcon}\n          onChange={(event) => setUpdateBitcoin(event.target.value)}\n        />\n      </div>\n      {coins.map(coin => (\n        <p key={coin[0]}>\n          {`${coin[0]}: ${coin[1].rate_float * updateBitcon}`}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nfunction Home() {\n  const { getData } = useContext(CryptoContext);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div>\n      {ShowValues()}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { CryptoContext } from '../context/CryptoContext';\nimport { getLocalStorage } from '../services/services';\n\nfunction changeCurrencyValue(selectedCoin, changeValueCurrency) {\n  axios.post('http://localhost:3001/crypto/btc',\n    {\n      currency: selectedCoin,\n      value: changeValueCurrency\n    },\n    {\n      headers: {\n        Authorization: getLocalStorage(),\n      },\n    })\n    .then((data) => {\n      if (data.message === 'Valor alterado com sucesso!')\n        console.log(data.message);\n    })\n    .catch(err => console.log(err))\n}\n\nfunction CurrencyUpdateForm() {\n  const {\n    changeValueCurrency,\n    selectedCoin,\n    setSelectedCoin,\n    currentCurrencyValue,\n    setChangeValueCurrency\n  } = useContext(CryptoContext);\n\n  return (\n    <div>\n      <label>\n        Moeda\n        <select value={selectedCoin} onChange={(e) => setSelectedCoin(e.target.value)}>\n          <option value='BRL'>BRL</option>\n          <option value='EUR'>EUR</option>\n          <option value='CAD'>CAD</option>\n        </select><br />\n      </label>\n      <span>Valor Atual: {`${currentCurrencyValue[selectedCoin]}`} </span><br />\n      <label>\n        Novo Valor\n          <input type=\"number\" onChange={(event) => setChangeValueCurrency(event.target.value)} />\n        <button\n          type=\"button\"\n          onClick={() => changeCurrencyValue(selectedCoin, changeValueCurrency)}\n        >\n          Atualizar\n        </button>\n      </label>\n    </div>\n  );\n}\n\nexport default function Update() {\n  const { getCurrency } = useContext(CryptoContext);\n\n  useEffect(() => {\n    getCurrency();\n  }, []);\n\n  return (\n    <div>\n      {CurrencyUpdateForm()}\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css'\nimport { Provider } from './context/CryptoContext';\nimport Login from './components/login';\nimport Home from './components/home';\nimport Update from './components/update';\n\nfunction App() {\n  return (\n    <div>\n      <Provider>\n        <Login /> <br /> <br />\n        <Home /> <br /> <br />\n        <Update />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}