{"version":3,"sources":["Components/Login.js","context/BTCContext.js","App.js","serviceWorker.js","index.js"],"names":["input","className","email","onChange","placeholder","type","value","required","e","target","Login","useState","setEmail","senha","setSenha","handleSubmit","a","preventDefault","axios","post","password","response","localStorage","setItem","data","token","console","log","status","method","onSubmit","forms","BTCContext","createContext","BTCProvider","children","setData","setRead","write","setWrite","currency","setCurrency","fetchData","tokens","getItem","configurations","headers","authorization","get","then","catch","error","fetchDataGet","context","body","Number","err","message","Provider","App","Boolean","window","location","hostname","match","page","toot","raiz","document","getElementById","ReactDOM","hydrate","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1917692.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport axios from 'axios';\r\nimport './Login.css';\r\n\r\nconst input = (className, email, onChange, placeholder) => (\r\n  <input\r\n    type=\"text\"\r\n    className={className}\r\n    value={email}\r\n    required\r\n    onChange={e => onChange(e.target.value)}\r\n    placeholder={placeholder}\r\n  />\r\n);\r\n\r\nconst forms = (handleSubmit, email, senha, setEmail, setSenha) => (\r\n  <form method=\"post\" onSubmit={handleSubmit}>\r\n    {input('input-email1', email, setEmail, 'EMAIL')}\r\n    {input('input-senha1', senha, setSenha, 'SENHA')}\r\n    <button type=\"submit\" className=\"submit\">\r\n      ENTRAR\r\n    </button>\r\n  </form>\r\n);\r\n\r\nfunction Login() {\r\n  const [email, setEmail] = useState('');\r\n  const [senha, setSenha] = useState('');\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/login', {\r\n        email,\r\n        password: senha,\r\n      });\r\n      localStorage.setItem('token', response.data.token);\r\n      setEmail('');\r\n      setSenha('');\r\n    } catch (error) {\r\n      if (!error.response) {\r\n        return console.log('aqui mostra o que deu ruim', error);\r\n      }\r\n      console.log('→→', error.response.status, error.response.data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"login\">\r\n      {forms(handleSubmit, email, senha, setEmail, setSenha)}\r\n    </section>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Login;\r\n","import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BTCContext = createContext();\r\nconst BTCProvider = ({ children }) => {\r\n  const [data, setData] = useState('');\r\n  const [read, setRead] = useState('');\r\n  const [write, setWrite] = useState();\r\n  const [currency, setCurrency] = useState('BRL');\r\n\r\n  const fetchData = async () => {\r\n    const URL = 'http://localhost:3001/cryto/btc';\r\n    const tokens = localStorage.getItem('token');\r\n    const configurations = {\r\n      headers: { authorization: tokens, 'Content-Type': 'application/json' },\r\n    };\r\n    return axios\r\n      .get(URL, configurations)\r\n      .then(({ data }) => setData(data.data))\r\n      .catch(error => setData(error));\r\n  };\r\n\r\n  const fetchDataGet = async () => {\r\n    const URL = 'http://localhost:3001/cryto/btc';\r\n    const tokens = localStorage.getItem('token');\r\n    const configurations = {\r\n      headers: { authorization: tokens, 'Content-Type': 'application/json' },\r\n    };\r\n    return axios\r\n      .get(URL, configurations)\r\n      .then(({ data }) => {\r\n        setRead(data.data);\r\n      })\r\n      .catch(error => setRead(error));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const URL = 'http://localhost:3001/cryto/btc';\r\n    const tokens = localStorage.getItem('token');\r\n    const configurations = {\r\n      headers: { authorization: tokens, 'Content-Type': 'application/json' },\r\n    };\r\n    const body = {\r\n      currency,\r\n      value: Number(write),\r\n    };\r\n    return axios\r\n      .post(URL, body, configurations)\r\n      .then(({ data }) => console.log('data', data))\r\n      .catch(err => console.error(err.response.data.message));\r\n  };\r\n\r\n  const context = {\r\n    setData,\r\n    setRead,\r\n    setWrite,\r\n    setCurrency,\r\n    fetchData,\r\n    fetchDataGet,\r\n    handleSubmit,\r\n  };\r\n  return <BTCContext.Provider value={context}>{children}</BTCContext.Provider>;\r\n};\r\n\r\nBTCProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport { BTCContext, BTCProvider as Provider };\r\n","import React from 'react';\r\n// import Price from './Components/Price';\r\nimport Login from './Components/Login';\r\n// import Home from './Components/Home';\r\nimport { Provider } from './context/BTCContext';\r\n\r\nconst componentMajor = () => (\r\n  <div className=\"conteiner\">\r\n    <Login />\r\n    {/* <Price /> */}\r\n    {/* <Home /> */}\r\n  </div>\r\n);\r\n\r\nconst App = () => <Provider>{componentMajor()}</Provider>;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst raiz = document.getElementById('root');\r\n\r\nconst superFather = (page, toot) => {\r\n  ReactDOM.hydrate(page, toot);\r\n  return serviceWorker.unregister();\r\n};\r\n\r\nsuperFather(<App />, raiz);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}