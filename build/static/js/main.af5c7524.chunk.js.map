{"version":3,"sources":["context/CryptoContext.jsx","components/login.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["CryptoContext","createContext","CryptoProvider","children","useState","userEmail","setUserEmail","context","userPassword","setUserPassword","Provider","value","Login","useContext","htmlFor","type","name","onChange","event","target","placeholder","required","FormLogin","onClick","axios","post","email","password","then","response","status","localStorage","setItem","data","token","SendingRequestAndGettingTokenToUser","Home","App","Boolean","window","location","hostname","match","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4PAGMA,EAAgBC,0BAEhBC,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACLC,qBADK,mBAChCC,EADgC,KACrBC,EADqB,OAECF,qBAFD,mBAIjCG,EAAU,CACdF,YACAG,aANqC,KAOrCF,eACAG,gBARqC,MAWvC,OACE,kBAACT,EAAcU,SAAf,CAAwBC,MAAOJ,GAC5BJ,I,iBC0BQ,SAASS,IAAS,IAAD,EACMC,qBAAWb,GAAvCK,EADsB,EACtBA,UAAWG,EADW,EACXA,aAEnB,OACE,6BA5CJ,WAAsB,IAAD,EACgDK,qBAAWb,GAAtEK,EADW,EACXA,UAAWG,EADA,EACAA,aAAcF,EADd,EACcA,aAAcG,EAD5B,EAC4BA,gBAC/C,OACE,8BACE,2BAAOK,QAAQ,SAAf,SAEE,2BACEC,KAAK,QACLC,KAAK,QACLL,MAAON,EACPY,SAAU,SAACC,GAAD,OAAWZ,EAAaY,EAAMC,OAAOR,QAC/CS,YAAY,sBACZC,UAAQ,KAIZ,2BAAOP,QAAQ,YAAf,YAEE,2BACEC,KAAK,WACLC,KAAK,WACLL,MAAOH,EACPS,SAAU,SAACC,GAAD,OAAWT,EAAgBS,EAAMC,OAAOR,QAClDS,YAAY,mBACZC,UAAQ,MAqBXC,GACD,4BAAQP,KAAK,SAASQ,QAAS,kBAfrC,SAA6ClB,EAAWG,GACtDgB,IAAMC,KAAK,8BAA+B,CACxCC,MAAOrB,EACPsB,SAAUnB,IACToB,MAAK,SAACC,IACHA,EAASC,OAAS,MAAKC,aAAaC,QAAQ,QAASH,EAASI,KAAKC,UAUhCC,CAAoC9B,EAAWG,KAApF,WCxCS4B,MARf,WACE,OACE,6BACE,4CCYSC,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAACzB,EAAD,MACA,kBAAC,EAAD,SCCY0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,QAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af5c7524.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst CryptoContext = createContext();\n\nconst CryptoProvider = ({ children }) => {\n  const [userEmail, setUserEmail] = useState();\n  const [userPassword, setUserPassword] = useState();\n\n  const context = {\n    userEmail,\n    userPassword,\n    setUserEmail,\n    setUserPassword,\n  };\n\n  return (\n    <CryptoContext.Provider value={context}>\n      {children}\n    </CryptoContext.Provider>\n  );\n};\n\nCryptoProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport { CryptoContext, CryptoProvider as Provider };\n","import React, { useContext } from 'react';\nimport { CryptoContext } from '../context/CryptoContext';\nimport axios from 'axios';\n\nfunction FormLogin() {\n  const { userEmail, userPassword, setUserEmail, setUserPassword } = useContext(CryptoContext);\n  return (\n    <form >\n      <label htmlFor=\"email\">\n        email:\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={userEmail}\n          onChange={(event) => setUserEmail(event.target.value)}\n          placeholder=\"exemplo@exemplo.com\"\n          required\n        />\n      </label>\n\n      <label htmlFor=\"password\">\n        password:\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={userPassword}\n          onChange={(event) => setUserPassword(event.target.value)}\n          placeholder=\"Digite sua senha\"\n          required\n        />\n      </label>\n    </form>\n  );\n}\n\nfunction SendingRequestAndGettingTokenToUser(userEmail, userPassword) {\n  axios.post('http://localhost:3001/login', {\n    email: userEmail,\n    password: userPassword\n  }).then((response) => {\n    if (response.status = 200) localStorage.setItem('token', response.data.token);\n  });\n}\n\nexport default function Login() {\n  const { userEmail, userPassword } = useContext(CryptoContext);\n\n  return (\n    <div>\n      {FormLogin()}\n      <button type=\"submit\" onClick={() => SendingRequestAndGettingTokenToUser(userEmail, userPassword)}>Entrar</button>\n    </div>\n  );\n}\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div>\n      <h1>Deu certo!</h1>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css'\nimport { Provider } from './context/CryptoContext';\nimport Login from './components/login';\nimport Home from './components/home';\n\nfunction App() {\n  return (\n    <div>\n      <Provider>\n        <Login />\n        <Home />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}